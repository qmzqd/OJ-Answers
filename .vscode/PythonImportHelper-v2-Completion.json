[
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "ttk",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "pywifi",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pywifi",
        "description": "pywifi",
        "detail": "pywifi",
        "documentation": {}
    },
    {
        "label": "const",
        "importPath": "pywifi",
        "description": "pywifi",
        "isExtraImport": true,
        "detail": "pywifi",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "tkinter.filedialog",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter.filedialog",
        "description": "tkinter.filedialog",
        "detail": "tkinter.filedialog",
        "documentation": {}
    },
    {
        "label": "tkinter.messagebox",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter.messagebox",
        "description": "tkinter.messagebox",
        "detail": "tkinter.messagebox",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "wifi破解.venv.Scripts.activate_this",
        "description": "wifi破解.venv.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": "wifi破解.venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "wifi破解.venv.Scripts.activate_this",
        "description": "wifi破解.venv.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": "wifi破解.venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "wifi破解.venv.Scripts.activate_this",
        "description": "wifi破解.venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": "wifi破解.venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "wifi破解.venv.Scripts.activate_this",
        "description": "wifi破解.venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "wifi破解.venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": "wifi破解.venv.Scripts.activate_this",
        "description": "wifi破解.venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "wifi破解.venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "wifi破解.venv.Scripts.activate_this",
        "description": "wifi破解.venv.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "wifi破解.venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "wifi破解.venv.Scripts.activate_this",
        "description": "wifi破解.venv.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "wifi破解.venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "wifi破解.venv.Scripts.activate_this",
        "description": "wifi破解.venv.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "wifi破解.venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "wifi破解.venv.Scripts.activate_this",
        "description": "wifi破解.venv.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "wifi破解.venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "WIFI_GUI",
        "kind": 6,
        "importPath": "wifi破解.main",
        "description": "wifi破解.main",
        "peekOfCode": "class WIFI_GUI():\n    def __init__(self, init_window_name):\n        self.init_window_name = init_window_name\n        # 密码文件路径\n        self.get_value = StringVar()\n        # 获取破解wifi账号\n        self.get_wifi_value = StringVar()\n        # 获取wifi密码\n        self.get_wifimm_value = StringVar()\n        self.wifi = pywifi.PyWiFi()  # 抓取网卡接口",
        "detail": "wifi破解.main",
        "documentation": {}
    },
    {
        "label": "gui_start",
        "kind": 2,
        "importPath": "wifi破解.main",
        "description": "wifi破解.main",
        "peekOfCode": "def gui_start():\n    init_window = Tk()\n    ui = WIFI_GUI(init_window)\n    print(ui)\n    ui.set_init_window()\n    init_window.mainloop()\nif __name__ == '__main__':\n    gui_start()",
        "detail": "wifi破解.main",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "中南--暑假.day06.作业6",
        "description": "中南--暑假.day06.作业6",
        "peekOfCode": "n = int(input())  \nm = 0 \np = 0  \nfor i in range(n):\n    v=int(input())\n    if v>m:\n        m=v\n        p=i+1\nprint(p)  \nprint(m)",
        "detail": "中南--暑假.day06.作业6",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "中南--暑假.day06.作业6",
        "description": "中南--暑假.day06.作业6",
        "peekOfCode": "m = 0 \np = 0  \nfor i in range(n):\n    v=int(input())\n    if v>m:\n        m=v\n        p=i+1\nprint(p)  \nprint(m)",
        "detail": "中南--暑假.day06.作业6",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "中南--暑假.day06.作业6",
        "description": "中南--暑假.day06.作业6",
        "peekOfCode": "p = 0  \nfor i in range(n):\n    v=int(input())\n    if v>m:\n        m=v\n        p=i+1\nprint(p)  \nprint(m)",
        "detail": "中南--暑假.day06.作业6",
        "documentation": {}
    },
    {
        "label": "v",
        "kind": 5,
        "importPath": "模拟考.road",
        "description": "模拟考.road",
        "peekOfCode": "v = list(map(int, input().split()))  \na = list(map(int, input().split()))  \ndp = [0] * n  \ndp[0] = 0  \nfor i in range(1, n):  \n    dp[i] = min(dp[i-1], dp[i-1] + a[i-1] * math.ceil(v[i-1] / d))  \nprint(dp[n-1])",
        "detail": "模拟考.road",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "模拟考.road",
        "description": "模拟考.road",
        "peekOfCode": "a = list(map(int, input().split()))  \ndp = [0] * n  \ndp[0] = 0  \nfor i in range(1, n):  \n    dp[i] = min(dp[i-1], dp[i-1] + a[i-1] * math.ceil(v[i-1] / d))  \nprint(dp[n-1])",
        "detail": "模拟考.road",
        "documentation": {}
    },
    {
        "label": "dp",
        "kind": 5,
        "importPath": "模拟考.road",
        "description": "模拟考.road",
        "peekOfCode": "dp = [0] * n  \ndp[0] = 0  \nfor i in range(1, n):  \n    dp[i] = min(dp[i-1], dp[i-1] + a[i-1] * math.ceil(v[i-1] / d))  \nprint(dp[n-1])",
        "detail": "模拟考.road",
        "documentation": {}
    },
    {
        "label": "dp[0]",
        "kind": 5,
        "importPath": "模拟考.road",
        "description": "模拟考.road",
        "peekOfCode": "dp[0] = 0  \nfor i in range(1, n):  \n    dp[i] = min(dp[i-1], dp[i-1] + a[i-1] * math.ceil(v[i-1] / d))  \nprint(dp[n-1])",
        "detail": "模拟考.road",
        "documentation": {}
    }
]